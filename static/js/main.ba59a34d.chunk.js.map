{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","tasks","useSelector","state","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","AppWithRedux","todolists","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","stateCopy","newTasks","newTask","todolistTasks","copyState","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ba59a34d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n  console.log('AddItemForm is called');\r\n  let [title, setTitle] = useState(\"\")\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const addItem = () => {\r\n    if (title.trim() !== \"\") {\r\n      props.addItem(title);\r\n      setTitle(\"\");\r\n    } else {\r\n      setError(\"Title is required\");\r\n    }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItem();\r\n    }\r\n  }\r\n\r\n  return <div>\r\n    <TextField variant=\"outlined\"\r\n               error={!!error}\r\n               value={title}\r\n               onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n               label=\"Title\"\r\n               helperText={error}\r\n    />\r\n    <IconButton color=\"primary\" onClick={addItem}>\r\n      <AddBox/>\r\n    </IconButton>\r\n  </div>\r\n});\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan is called')\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskType} from './Todolist';\r\n\r\ntype TaskPropsType = {\r\n  changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  task: TaskType\r\n  todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked;\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId);\r\n  }\r\n  const onTitleChangeHandler = useCallback((newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todolistId);\r\n  }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n\r\n  return <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n    <Checkbox\r\n      checked={props.task.isDone}\r\n      color=\"primary\"\r\n      onChange={onChangeHandler}\r\n    />\r\n\r\n    <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n    <IconButton onClick={onClickHandler}>\r\n      <Delete/>\r\n    </IconButton>\r\n  </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './AppWithRedux';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n  id: string\r\n  title: string\r\n  tasks?: Array<TaskType>\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n  addTask: (title: string, todolistId: string) => void\r\n  changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTodolist: (id: string) => void\r\n  changeTodolistTitle: (id: string, newTitle: string) => void\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n  console.log('Todolist is called')\r\n\r\n  let tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n      props.addTask(title, props.id);\r\n    }\r\n    , [props.addTask, props.id]);\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(props.id);\r\n  }\r\n\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    props.changeTodolistTitle(props.id, title);\r\n  }, [props.id, props.changeTodolistTitle]);\r\n\r\n  const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n  const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n  const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\r\n\r\n  if (props.filter === \"active\") {\r\n    tasks = tasks.filter(t => t.isDone === false);\r\n  }\r\n\r\n  if (props.filter === \"active\") {\r\n    tasks = tasks.filter(t => t.isDone === false);\r\n  }\r\n\r\n  return <div>\r\n    <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n      <IconButton onClick={removeTodolist}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </h3>\r\n    <AddItemForm addItem={addTask}/>\r\n    <div>\r\n      {\r\n        tasks.map(t => <Task\r\n            key={props.id}\r\n            changeTaskStatus={props.changeTaskStatus}\r\n            removeTask={props.removeTask}\r\n            changeTaskTitle={props.changeTaskTitle}\r\n            task={t}\r\n            todolistId={props.id}\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n    <div style={{paddingTop: \"10px\"}}>\r\n      <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n              onClick={onAllClickHandler}\r\n              color={'default'}\r\n      >All\r\n      </Button>\r\n      <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n              onClick={onActiveClickHandler}\r\n              color={'primary'}\r\n      >Active\r\n      </Button>\r\n      <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n              onClick={onCompletedClickHandler}\r\n              color={'secondary'}\r\n      >Completed\r\n      </Button>\r\n    </div>\r\n  </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import {TasksStateType} from '../AppWithRedux';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n  type: 'REMOVE-TASK',\r\n  todolistId: string\r\n  taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n  type: 'ADD-TASK',\r\n  todolistId: string\r\n  title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n  type: 'CHANGE-TASK-STATUS',\r\n  todolistId: string\r\n  taskId: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n  type: 'CHANGE-TASK-TITLE',\r\n  todolistId: string\r\n  taskId: string\r\n  title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n  | ChangeTaskStatusActionType\r\n  | ChangeTaskTitleActionType\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK': {\r\n      const stateCopy = {...state}\r\n      const tasks = stateCopy[action.todolistId];\r\n      const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n      stateCopy[action.todolistId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n    case 'ADD-TASK': {\r\n      const stateCopy = {...state}\r\n      const newTask: TaskType = {\r\n        id: v1(),\r\n        title: action.title,\r\n        isDone: false\r\n      }\r\n      const tasks = stateCopy[action.todolistId];\r\n      const newTasks = [newTask, ...tasks];\r\n      stateCopy[action.todolistId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n    case 'CHANGE-TASK-STATUS': {\r\n\r\n      // let newState: TasksStateType = {}\r\n      // for (let key in state){\r\n      //   if (key !== action.todolistId) {\r\n      //     newState[key] = state[key].map(task => task)\r\n      //   } else {\r\n      //     newState[action.todolistId] = state[action.todolistId]\r\n      //       .map(t => t.id === action.taskId ?\r\n      //         {...t, isDone: action.isDone}\r\n      //         : t);\r\n      //   }\r\n      // }\r\n      // return (newState);\r\n      let todolistTasks = state[action.todolistId];\r\n      state[action.todolistId] = todolistTasks\r\n        .map(t => t.id === action.taskId ?\r\n          {...t, isDone: action.isDone}\r\n          : t);\r\n      return ({...state});\r\n\r\n    }\r\n    case 'CHANGE-TASK-TITLE': {\r\n      let todolistTasks = state[action.todolistId];\r\n      state[action.todolistId] = todolistTasks\r\n        .map(t => t.id === action.taskId ?\r\n          {...t, title: action.title}\r\n          : t);\r\n      return ({...state});\r\n    }\r\n    case 'ADD-TODOLIST': {\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: []\r\n      }\r\n    }\r\n    case 'REMOVE-TODOLIST': {\r\n      const copyState = {...state};\r\n      delete copyState[action.id];\r\n      return copyState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst changeStatusAndTitleTask = (state: TasksStateType, todolistId: string, taskId: string, item: boolean | string): TasksStateType => {\r\n  let newState: TasksStateType = {}\r\n  for (let key in state) {\r\n    if (key !== todolistId) {\r\n      newState[key] = state[key].map(task => task)\r\n    } else {\r\n      newState[todolistId] = state[todolistId]\r\n        .map(t => {\r\n            if (t.id !== taskId) {\r\n              return t\r\n            } else {\r\n              if (typeof item === 'string') {\r\n                return {...t, title: item}\r\n              } else {\r\n                return {...t, isDone: item}\r\n              }\r\n            }\r\n          }\r\n        )\r\n    }\r\n  }\r\n  return (newState);\r\n};\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n  return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n  return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n  return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n  return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n  addTodolistAC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleAC,\r\n  removeTodolistAC\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n  console.log('AppWithRedux is called');\r\n\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n  const dispatch = useDispatch();\r\n\r\n  const removeTask = useCallback((id: string, todolistId: string) => {\r\n    const action = removeTaskAC(id, todolistId);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n\r\n  const addTask = useCallback((title: string, todolistId: string) => {\r\n    const action = addTaskAC(title, todolistId);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n    const action = changeTaskStatusAC(id, isDone, todolistId);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n    const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n    const action = changeTodolistFilterAC(todolistId, value);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  const removeTodolist = useCallback((id: string) => {\r\n    const action = removeTodolistAC(id);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n    const action = changeTodolistTitleAC(id, title);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    const action = addTodolistAC(title);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n          <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todolists.map(tl => {\r\n\r\n              return <Grid item key={tl.id}>\r\n                <Paper style={{padding: \"10px\"}}>\r\n                  <Todolist\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodolistTitle={changeTodolistTitle}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            })\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}